stages:
  - validate
  - plan
  - apply
  - destroy

variables:
  TF_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/gitlab-org/terraform-images/releases/1.4:v1.0.0"
  TF_PATH: IaC/provisioning
  TF_STATE_NAME: default
  SECURE_FILES_DOWNLOAD_PATH: "./terraform"

validate:
  stage: validate
  image: 
    name: ${TF_IMAGE}
  before_script:
    - curl -s https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer | sh
    - cd ${TF_PATH}
  script:
    - gitlab-terraform init
    - gitlab-terraform validate
  resource_group: ${TF_STATE_NAME} # limit the concurrency of jobs to access shared resource
  cache:
    untracked: true
    paths:
      - ${TF_PATH}
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - ${TF_PATH}/main.tf

plan:
  stage: plan
  image: ${TF_IMAGE}
  before_script:
    - cd ${TF_PATH}
  script:
    - terraform plan -out=tfplan
  resource_group: ${TF_STATE_NAME} # limit the concurrency of jobs to access shared resource
  artifacts:
    paths:
      - ${TF_PATH}/tfplan
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - ${TF_PATH}/main.tf

apply:
  stage: apply
  image: ${TF_IMAGE}
  before_script:
    - cd ${TF_PATH}
  script:
    - terraform apply tfplan
  resource_group: ${TF_STATE_NAME} # limit the concurrency of jobs to access shared resource
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - ${TF_PATH}/main.tf
      when: manual

destroy:
  stage: destroy
  image: ${TF_IMAGE}
  before_script:
    - cd ${TF_PATH}
  script:
    - terraform destroy -auto-approve
  resource_group: ${TF_STATE_NAME} # limit the concurrency of jobs to access shared resource
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - ${TF_PATH}/main.tf
      when: manual
