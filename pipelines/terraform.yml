image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
variables:
  TF_ROOT: IaC/provisioning
  TF_ADDRESS: https://gitlab.com/api/v4/projects/51944352/terraform/state/dynamic-resume

cache:
  key: example-production
  paths:
    - ${TF_ROOT}/.terraform

before_script:
  - cd ${TF_ROOT}
  - terraform init \
    -backend-config="address=https://gitlab.com/api/v4/projects/51944352/terraform/state/dynamic-resume" \
    -backend-config="lock_address=https://gitlab.com/api/v4/projects/51944352/terraform/state/dynamic-resume/lock" \
    -backend-config="unlock_address=https://gitlab.com/api/v4/projects/51944352/terraform/state/dynamic-resume/lock" \
    -backend-config="username=frem3n" \
    -backend-config="password=$TF_TOKEN" \
    -backend-config="lock_method=POST" \
    -backend-config="unlock_method=DELETE" \
    -backend-config="retry_wait_min=5"


stages:
  - prepare
  - validate
  - build
  - deploy

init:
  stage: prepare
  script:
    - gitlab-terraform init

validate:
  stage: validate
  script:
    - gitlab-terraform init
    - gitlab-terraform validate

plan:
  stage: build
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

# Separate apply job for manual launching Terraform as it can be destructive
# action.
apply:
  stage: deploy
  environment:
    name: production
  script:
    - gitlab-terraform apply
  dependencies:
    - plan
  when: manual
  only:
    - master
