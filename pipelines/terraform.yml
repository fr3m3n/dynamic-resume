default:
  image:
    name: "$CI_TEMPLATE_REGISTRY_HOST/gitlab-org/terraform-images/stable:latest"

  cache:
    key: "$CI_PROJECT_DIR-IaC-provisioning"
    paths:
      - IaC/provisioning/.terraform/

variables:
  TF_ROOT: "IaC/provisioning/"  # Adjusted path to the Terraform project directory
  TF_STATE_NAME: default        # The name of the state file used by the GitLab Managed Terraform state backend

.terraform:fmt:
  stage: validate
  script:
    - cd $TF_ROOT
    - gitlab-terraform fmt
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

.terraform:validate:
  stage: validate
  script:
    - cd $TF_ROOT
    - gitlab-terraform validate
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

.terraform:build:
  stage: build
  script:
    - cd $TF_ROOT
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  resource_group: $TF_STATE_NAME
  artifacts:
    public: false
    paths:
      - $TF_ROOT/plan.cache
    reports:
      terraform: $TF_ROOT/plan.json
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

.terraform:deploy:
  stage: deploy
  script:
    - cd $TF_ROOT
    - gitlab-terraform apply
  resource_group: $TF_STATE_NAME
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $TF_AUTO_DEPLOY == "true"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

.terraform:destroy:
  stage: cleanup
  script:
    - cd $TF_ROOT
    - gitlab-terraform destroy
  resource_group: $TF_STATE_NAME
  when: manual
